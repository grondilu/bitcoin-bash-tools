1c1,26
< abandon
---
> #!/bin/bash
> #GenFirstWordsAndAddress.bash
> #CREDIT: https://github.com/grondilu/bitcoin-bash-tools Copyright (C) 2013 Lucien Grondin (grondilu@yahoo.fr)
> #LICENSE: SPDX MIT https://spdx.org/licenses/MIT.html
> #SUPPORT: https://github.com/petjal/bitcoin-bash-tools/issues
> #This script: github:petjal Thu Sep 23 14:59:23 UTC 2021
> #VERSION: 2109281236Z
> #CHANGE: pj incorporate wordlist.txt
> #TODO: insert all external code into this file -- done
> #TODO: trap errors, bail on everything
> #TODO: sign this file when done
> #TODO: test on windows linux (wsl) terminal, macos
>  
> #USAGE:
> #For use by technical folks to help beginners among family, friends, confidants get started safely as simply as possible
> #Open a terminal on gnu/linux. (Not yet tested on windows, mac. Developed initially on chromebook in termux).
> #Get signed file bundle. 
> #Check bundle signature.
> #Extract signed file bundle.
> #Run:  cd ./bitcoin-bash-tools
> #Run:  bash GenSimplestAddress.bash
> 
> #REQUIREMENTS: Install dc, ent, openssl. 
> 
> #CONSTANTS
> wordlist="abandon
2048c2073,2098
< zoo
---
> zoo"
> 
> 
> 
> 
> 
> 
> #FUNCTIONS
> 
> #Load bitcoin functions into shell.
> #. ./bitcoin.sh
> #. ./bip-0039.sh
> #. ./base58.sh  needs to be above bip-0032
> #. ./bip-0032.sh
> #. ./bech32.sh
> #. ./bip-0173.sh
> 
> 
> 
> 
> 
> 
> #IMPORTS
> 
> #IMPORT ./bitcoin.sh
> 
2077c2127
< . base58.sh
---
> #. base58.sh
2212a2263,2271
> 
> 
> 
> 
> 
> 
> 
> #IMPORT ./bip-0039.sh
> 
2308a2368,2371
>     #ORIG:do grep -q "^$word$" wordlist.txt || return 1
> 	#ORIG: for word; do grep -n "^$word$" wordlist.txt; done |
>     #PJ: do echo "$wordlist" | grep -q "^$word$" || return 1
> 	#PJ:  for word; do echo "$wordlist" | grep -n "^$word$" ; done |
2314c2377
<     do grep -q "^$word$" wordlist.txt || return 1
---
>     do echo "$wordlist" | grep -q "^$word$" || return 1
2319c2382
< 	for word; do grep -n "^$word$" wordlist.txt; done |
---
> 	for word; do echo "$wordlist" | grep -n "^$word$" ; done |
2331c2394,2396
< complete -W "$(< wordlist.txt)" mnemonic-to-seed
---
> #ORIG: complete -W "$(< wordlist.txt)" mnemonic-to-seed
> #PJ: complete -W "$wordlist" mnemonic-to-seed
> complete -W "$wordlist" mnemonic-to-seed
2368a2434,2444
> 
> 
> 
>     #FIXED: This is the wordlist command that breaks when incorporating wordlist as a string into this script.
>     #ORIG: declare -a wordlist=($(< wordlist.txt))
>     #ORIG: (( ${#wordlist[@]} != 2048 ))
>     #ORIG: do echo ${wordlist[REPLY]}
>     #PJ1:  declare -a wordlist="$wordlist"
>     #PJ1:  (( $(echo "$wordlist" | wc -l) != 2048 ))
>     #PJ2:  declare -a wordlist=( $wordlist )
>     #PJ2: do echo ${word_list[REPLY]}
2381,2385d2456
<   elif [ ! -L wordlist.txt ]
<   then
<     1>&2 echo Please create a symbolic link to a wordlist file.
<     1>&2 echo Name it wordlist.txt and place it in the current directory.
<     return 1
2387,2388c2458,2459
<     declare -a wordlist=($(< wordlist.txt))
<     (( ${#wordlist[@]} != 2048 ))
---
>     declare -a word_list=( $wordlist )
>     (( ${#word_list[@]} != 2048 ))
2421c2492
<     do echo ${wordlist[REPLY]}
---
>     do echo ${word_list[REPLY]}
2433a2505,2513
> 
> 
> 
> 
> 
> 
> 
> #IMPORT ./base58.sh
> 
2505,2507c2585,2599
< if ! test -v base58
< then . base58.sh
< fi
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> #IMPORT ./bip-0032.sh
> 
> #if ! test -v base58
> #then . base58.sh
> #fi
2783a2876,2890
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> #IMPORT ./bech32.sh
> 
2938a3046,3055
> 
> 
> 
> 
> 
> 
> 
> 
> #IMPORT ./bip-0173.sh
> 
2941c3058
< . bech32.sh
---
> #. bech32.sh
3061a3179,3232
> 
> 
> 
> 
> 
> 
> 
> 
> #MAIN
> 
> echo -e "Use this script only after you understand the instructions provided here:
> https://github.com/petjal/bitcoin-bash-tools/blob/pjdev/VITAL_INFORMATION"
> 
> #ENTROPY
> echo
> echo "Gathering and testing entropy..."
> #This find command fails in github action workspace, that's ok.
> #If you don't get enough entropy, increase this "head" count from 100 to 1000 or 10000, but the script will take that much longer.
> find ~ -type f 2> /dev/null | head -n 100 | xargs cat > /dev/null 2>&1
> #test entropy
> kernel_entropy_avail=$(cat /proc/sys/kernel/random/entropy_avail) # less than 100-200, you have a problem
> echo "kernel_entropy_avail: $kernel_entropy_avail (greater than 100 is good)"
> 
> if [[ "$kernel_entropy_avail" -lt "200" ]] ; then echo "ERROR: kernel entropy_avail $kernel_entropy_avail less than 100, too low, sorry, cannot proceed." ; exit 1 ; fi
> #Entropy = 1.000000 bits per bit.
> entropy_test_val=$(head -c 1M /dev/urandom > /tmp/out ;  ent -b /tmp/out | grep Entropy | cut -d ' ' -f 3)
> echo "entropy test value: $entropy_test_val (1.000 is great)"
> if [[ "$entropy_test_val" < "0.9000" ]] ; then echo "ERROR: entropy $entropy_test_val less than 0.9, too low, sorry, cannot proceed." ; fi
> echo
> 
> 
> #echo "generating new sequence of 12 secret words..."
> my_new_secret_words=$(create-mnemonic 128)  # 128 = 12 words, 256 = 24 words of entropy
> 
> check-mnemonic "$my_new_secret_words" # ; echo $?  returns 3
> echo "HERE IS YOUR BITCOIN SECRET SEED PHRASE:"
> echo $my_new_secret_words
> echo
> 
> echo "This next step will take up to two minutes or more on a low-powered computer such as a raspberry pi..."
> 
> root_seed=$(mnemonic-to-seed "$my_new_secret_words" 2> /dev/null)  # takes a very long time due to pbkdf2; 128 bytes
> m=$(bip32 -s "$root_seed")  # private key
> private_key_details=$(bip32 -p "$m")
> M=$(bip32 "$m/N") # public key
> public_key_details=$(bip32 -p "$M")
> p=$(echo "$public_key_details" | cut -d ' ' -f 6)
> echo
> 
> 
> echo "HERE IS YOUR PUBLIC BITCOIN ADDRESS:"
> segwitAddress -p $p
> echo
> 
